package com.vidivox.Generators;

import com.vidivox.view.WarningDialogue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;

import java.io.*;
import java.nio.file.Files;
import java.util.Scanner;

/**
 * Created by Jayden on 9/10/2015.
 * This class keeps all the methods relating to the manifest file in one place.
 * The manifest is structured as follows:
 * Video File
 * Audio files, each on a new line
 */
//The project folder probably needs this too.
public class ManifestController {
    File manifest;
    public ManifestController(File projectDir){
        this.manifest = new File(projectDir.getAbsolutePath()+System.getProperty("file.separator")+"Manifest.vvx");
    }

    /**
     * Creates the manifest file.
     */
    public void create() {
        try {
            manifest.createNewFile();
        }catch(IOException e){
            //This should be unreachable in the current build.
            WarningDialogue.genericError("A manifest file already exists for this project");
        }
    }

    /**
     * Updates the video entry in the manifest.
     * @param videoName - The name to update to.
     * @throws FileNotFoundException - Thrown so that other functions can be stopped if an error occurs in this call.
     * For example, if an error occurs updating the manifest, stop what was happening in the calling method.
     * This method could be shortened.
     */
     public void setVideo(String videoName) throws FileNotFoundException {
         try {
             //Trim the manifest name from the path, returning the project directory.
             String path = manifest.getPath().substring(0,manifest.getPath().lastIndexOf(System.getProperty("file.separator")));
             //Create a temporary file.
             File temporary = new File(path + System.getProperty("file.separator") + "Temp.vvx");
             temporary.createNewFile();
             Scanner s1 = new Scanner(manifest);
             PrintWriter w1 = new PrintWriter(temporary);
             //Add new video to top of file
             w1.println(videoName);
             //Skip video in old file
             if (s1.hasNextLine()) {
                 s1.nextLine();
             }
             //Add audio files to new manifest
             while (s1.hasNextLine()) {
                 w1.append(s1.nextLine());
             }
             s1.close();
             w1.close();
             PrintWriter w2 = new PrintWriter(manifest);
             Scanner s2 = new Scanner(temporary);
             //Clear the file
             w2.print("");
             //Write the temporary values into the manifest.
             while (s2.hasNextLine()) {
                 w2.append(s2.nextLine());
             }
             w2.close();
             s2.close();
             //Delete the temporary file
             Files.delete(temporary.toPath());
         }catch (IOException e) {
             //This should be unreachable, unless a temporary file already exists.
             new WarningDialogue("This project already contains a temporary file, not generated by Vidivox. Please remove it, then try again.");
         }
     }

    /**
     * Reads the manifest and gets the video.
     * @return  - the name of the video, as a string.
     * @throws FileNotFoundException - Thrown so that other functions can be stopped if an error occurs in this call.
     * For example, if an error occurs updating the manifest, stop what was happening in the calling method.
     */
    public String getVideo() throws FileNotFoundException {
        Scanner r = new Scanner(manifest);
        String video = r.nextLine();
        r.close();
        return video;
    }

    /**
     * Adds an audio file to the end of the manifest.
     * @param audioName - the name of the file to add.
     * @throws FileNotFoundException - Thrown so that other functions can be stopped if an error occurs in this call.
     * For example, if an error occurs updating the manifest, stop what was happening in the calling method.
     */
    public void addAudio(String audioName) throws FileNotFoundException {
        try {
            FileWriter w = new FileWriter(manifest,true);
            w.append("\n"+audioName);
            w.close();
        }catch(IOException e){
            //This should be unreachable.
            new WarningDialogue("A manifest error has occurred. Try reopening the project.");
        }
    }

    /**
     * Removes a list of audio files from the manifest.
     * @param files - the names of the files to remove.
     */
    public void removeAudio(ObservableList<String> files) {
        try{
            //Trim the manifest name from the path, returning the project directory.
            String path = manifest.getPath().substring(0,manifest.getPath().lastIndexOf(System.getProperty("file.separator")));
            File temporary = new File(path + System.getProperty("file.separator") + "Temp.vvx");
            temporary.createNewFile();
            Scanner s1 = new Scanner(manifest);
            PrintWriter w1 = new PrintWriter(temporary);
            //Copy manifest, omitting the removed files.
            String curr;
            //This will handle the first line, which will always be the video.
            w1.append(s1.nextLine());
            while (s1.hasNextLine()) {
                curr = s1.nextLine();
                //If the list of files to delete doesn't contain the current file name, skip it.
                if (!files.contains(curr)){
                    w1.append("\n"+curr);
                }
            }
            w1.close();
            s1.close();
            //Delete the old manifest, and change the temporary file to the manifest.
            Files.delete(manifest.toPath());
            temporary.renameTo(manifest);
        }catch (IOException e){
            //This should be unreachable, unless a temporary file already exists.
            new WarningDialogue("This project already contains a temporary file, not generated by Vidivox. Please remove it, then try again.");
        }
    }
    public ObservableList<String> getAudio() throws FileNotFoundException {
        Scanner s = new Scanner(manifest);
        //Audio file is the first line, and needs to be skipped.
        s.nextLine();
        //Add each line to the list.
        ObservableList<String> audio = FXCollections.observableArrayList();
        while(s.hasNextLine()){
            audio.add(s.nextLine());
        }
        s.close();
        return audio;
    }
}
